# https://taskfile.dev

version: '3'
interval: '200ms'

tasks:
# top level task targets

  build-bee:
    sources:
      - "{{.ROOT_DIR}}/src/bee/**/*.go"
    generates:
      - bee-macos
      - bee-linux
    dir: "{{.ROOT_DIR}}/src/bee/"
    cmds:
      # - CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -gcflags="all=-N -l" -o bee-macos ./
      - CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -gcflags="all=-N -l" -o "{{.ROOT_DIR}}/bee-macos" ./
      # - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -gcflags="all=-N -l" -o bee-linux ./
      - CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -gcflags="all=-N -l" -o "{{.ROOT_DIR}}/bee-linux" ./

  build-bunny:
    sources:
      - "{{.ROOT_DIR}}/src/bunny/**/*.go"
    generates:
      - bunny-macos
      - bunny-linux
    dir: "{{.ROOT_DIR}}/src/bunny/"
    cmds:
      # - CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -gcflags="all=-N -l" -o bunny-macos ./
      - CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -gcflags="all=-N -l" -o "{{.ROOT_DIR}}/bunny-macos" ./
      # - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -gcflags="all=-N -l" -o bunny-linux ./
      - CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -gcflags="all=-N -l" -o "{{.ROOT_DIR}}/bunny-linux" ./

  run-bee:
    deps: [build-bee]
    env:
      BEE_CONFIG_FILE_PATH: "{{.ROOT_DIR}}/deploy/local/bee.yaml"
      LOG_HANDLER: text
      # LOG_HANDLER: json
      MAIN_LOG_LEVEL: debug
      TZ: UTC
    cmds:
      - cmd: ./bee-macos
        platforms: [darwin]
      - cmd: ./bee-linux
        platforms: [linux]

  run-bunny:
    deps: [build-bunny]
    env:
      BUNNY_CONFIG_FILE_PATH: "{{.ROOT_DIR}}/deploy/local/bunny.yaml"
      LOG_HANDLER: text
      # LOG_HANDLER: json
      MAIN_LOG_LEVEL: info
      CONFIG_LOG_LEVEL: info
      EGRESS_LOG_LEVEL: info
      INGRESS_LOG_LEVEL: debug
      TELEMETRY_LOG_LEVEL: debug
      SIGNALS_LOG_LEVEL: info
      TZ: UTC
      # see: https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/
      # and: https://opentelemetry.io/docs/instrumentation/go/exporters/
      # TODO-LOW: doc how if these aren't set, shutdown takes about 10 seconds
      OTEL_METRIC_EXPORT_INTERVAL: "1000" # 1000 = 1 second
      OTEL_EXPORTER_OTLP_TIMEOUT: "1000" # 1000 = 1 second
      # this is the Grafana instance that we run locally (see the "install-grafana" and related tasks below)
      OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "http://localhost:30001/otlp/v1/metrics"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://localhost:30002/v1/traces"
    cmds:
      - cmd: ./bunny-macos
        platforms: [darwin]
      - cmd: ./bunny-linux
        platforms: [linux]


  build-docker-image:
    deps: [build-bunny, configure-docker]
    sources:
      - "{{.ROOT_DIR}}/bunny-linux"
      - "{{.ROOT_DIR}}/deploy/containers/bunny/Dockerfile"
    status:
      - docker image inspect bunny:latest
    dir: ./deploy/containers/bunny/
    cmds:
      - cp "{{.ROOT_DIR}}/bunny-linux" "{{.ROOT_DIR}}/deploy/containers/bunny/bunny"
      - defer: rm "{{.ROOT_DIR}}/deploy/containers/bunny/bunny"
      - docker build -t bunny .

  # this is a little hack-ish as there's no way to set memory in docker-desktop.yaml
  # and it isn't returned when getting the cluster JSON
  configure-docker:
    cmds:
      - ctlptl apply -f deploy/ctlptl/docker-desktop.yaml
      - ctlptl docker-desktop set vm.resources.memoryMiB 8192
      # - ctlptl docker-desktop set vm.kubernetes.enabled true
    status:
      - ctlptl get cluster docker-desktop -o json | jq --exit-status '.status.cpus == 4'

  add-telepresence-helm-repo:
    cmds:
      - helm repo add datawire https://app.getambassador.io
    status:
      - helm repo list --output json | jq --exit-status '.[] | select(.name == "datawire")'

  install-telepresence:
    deps: [configure-docker, add-telepresence-helm-repo]
    cmds:
      - helm repo update
      - helm install traffic-manager datawire/telepresence --wait --create-namespace --namespace ambassador 
      - kubectl wait --for=jsonpath='{.status.loadBalancer}' --namespace ambassador service/traffic-manager
    status:
      - helm list --namespace ambassador --output json | jq --exit-status '.[] | select(.name == "traffic-manager")'

  connect-telepresence:
    deps: [install-telepresence]
    cmds:
      - telepresence connect
    status:
      - telepresence status --output json | jq --exit-status '.root_daemon.running'
      - telepresence status --output json | jq --exit-status '.user_daemon.running'
      - telepresence status --output json | jq --exit-status '.user_daemon.status == "Connected"'

  disconnect-telepresence:
    cmds:
      - telepresence quit

  start-telepresence-intercept:
    deps: [connect-telepresence, create-bunny-deployment, create-bunny-secret, create-bunny-service]
    cmds:
      - telepresence intercept bunny --port 1312:1312 --env-file "{{.ROOT_DIR}}/deploy/bunny/kubernetes/bunny.telepresence-env"
    status:
      - telepresence status --output json | jq --exit-status '.root_daemon.running'
      - telepresence status --output json | jq --exit-status '.user_daemon.running'
      - telepresence status --output json | jq --exit-status '.user_daemon.status == "Connected"'

  stop-telepresence-intercept:
    cmds:
      - telepresence leave bunny

  create-bunny-deployment:
    deps: [configure-docker, build-docker-image]
    cmds:
      - kubectl apply -f "{{.ROOT_DIR}}/deploy/kubernetes/bunny/bunny-deployment.yaml"
    status:
      - kubectl get deployment bunny

  create-bunny-secret:
    deps: [configure-docker]
    cmds:
      - kubectl apply -f "{{.ROOT_DIR}}/deploy/kubernetes/bunny/bunny-secret.yaml"
    status:
      - kubectl get secret bunny

  create-bunny-service:
    deps: [configure-docker]
    cmds:
      - kubectl apply -f "{{.ROOT_DIR}}/deploy/kubernetes/bunny/bunny-service.yaml"
    status:
      - kubectl get service bunny

  add-grafana-helm-repo:
    cmds:
      - helm repo add grafana https://grafana.github.io/helm-charts
    status:
      - helm repo list --output json | jq --exit-status '.[] | select(.name == "grafana")'

  install-grafana:
    deps: [configure-docker, add-grafana-helm-repo, install-mimir, install-tempo]
    cmds:
      - helm repo update
      - helm install grafana grafana/grafana --atomic --wait --create-namespace --namespace grafana --version 7.0.19 --values "{{.ROOT_DIR}}/deploy/kubernetes/grafana/grafana-values.yaml"
    status:
      - helm list --namespace grafana --output json | jq --exit-status '.[] | select(.name == "grafana")'

  install-mimir:
    deps: [configure-docker, add-grafana-helm-repo]
    cmds:
      - helm install mimir grafana/mimir-distributed --atomic --wait --create-namespace --namespace mimir --version 5.1.4 --values "{{.ROOT_DIR}}/deploy/kubernetes/grafana/mimir-values.yaml"
    status:
      - helm list --namespace mimir --output json | jq --exit-status '.[] | select(.name == "mimir")'

  install-tempo:
    deps: [configure-docker, add-grafana-helm-repo]
    cmds:
      - helm install tempo grafana/tempo-distributed --atomic --wait --create-namespace --namespace tempo --version 1.7.3 --values "{{.ROOT_DIR}}/deploy/kubernetes/grafana/tempo-values.yaml"
    status:
      - helm list --namespace tempo --output json | jq --exit-status '.[] | select(.name == "tempo")'
  
  delete-grafana-all:
    deps: [delete-grafana, delete-mimir, delete-tempo]

  delete-grafana:
    cmds:
      - helm delete --wait -n grafana grafana
      - kubectl delete --ignore-not-found=true ns grafana
    status:
      - helm list --namespace grafana --output json | jq --exit-status '[ .[] | select(.name == "grafana") ] | length == 0'

  delete-mimir:
    cmds:
      - helm delete --wait -n mimir mimir
      - kubectl delete --ignore-not-found=true ns mimir
    status:
      - helm list --namespace mimir --output json | jq --exit-status '[ .[] | select(.name == "mimir") ] | length == 0'

  delete-tempo:
    cmds:
      - helm delete --wait -n tempo tempo
      - kubectl delete --ignore-not-found=true ns tempo
    status:
      - helm list --namespace tempo --output json | jq --exit-status '[ .[] | select(.name == "tempo") ] | length == 0'

  run-otelcol:
    cmds:
      - otelcol --config="{{.ROOT_DIR}}/deploy/local/otelcol.yaml"
