apiVersion: v1
kind: Secret
metadata:
  name: bunny
stringData:
  bunny.yaml: |
    egress:
      initialDelayMilliseconds: 0
      periodMilliseconds: 3000
      timeoutMilliseconds: 2000
      probes:
        # - name: "alpha"
        #   httpGet:
        #     host: "localhost"
        #     httpHeaders:
        #       - name: "x-bunny-test-header-name"
        #         value: ["test-value"]
        #       - name: "x-bunny-test-header-name2"
        #         value: ["test-value2"]
        #     port: 2624
        #     path: "healthz"
        #   metrics:
        #     attempts:
        #       name: "egress_probe_alpha_attempts"
        #       enabled: true
        #       extraLabels:
        #         - name: "egress_probe_alpha_test_label_name"
        #           value: "egress_probe_alpha_test_label_value"
        #     responseTime:
        #       name: "egress_probe_alpha_response_time"
        #       enabled: true
        #       extraLabels: []
        # - name: "beta"
        #   httpGet:
        #     host: "localhost"
        #     port: 2624
        #     path: "healthz"
        #   metrics:
        #     attempts:
        #       name: "egress_probe_beta_attempts"
        #       enabled: false
        #       extraLabels:
        #         - name: "egress_probe_beta_test_label_name"
        #           value: "egress_probe_beta_test_label_value"
        #     responseTime:
        #       name: "egress_probe_beta_response_time"
        #       enabled: true
        # - name: "gamma"
        #   grpc:
        #     port: 3936
        #     service: "health"
        #   metrics:
        #     attempts:
        #       name: "egress_probe_gamma_attempts"
        #       enabled: true
        #     responseTime:
        #       name: "egress_probe_gamma_response_time"
        #       enabled: true
        # - name: "delta"
        #   tcpSocket:
        #     host: "localhost"
        #     port: 5248
        #     expect:
        #       - send: 
        #           text: "hello"
        #           delimiter: "\n"
        #       - receive: 
        #           regex: "yellow"
        #           delimiter: "\n"
        #       - send:
        #           text: "how're ya now?"
        #           delimiter: "\n"
        #       - receive:
        #           regex: "can.* complain"
        #           delimiter: "\n"
        #   metrics:
        #     attempts:
        #       name: "egress_probe_delta_attempts"
        #       enabled: true
        #     responseTime:
        #       name: "egress_probe_delta_response_time"
        #       enabled: true
        - name: "epsilon"
          exec:
            # command: [ '/bin/bash', '-c', '/bin/echo "Hi ${NICKNAME}!"' ]
            # the "\c" at the end is a different way of making echo not print a newline
            # command: [ '/bin/bash', '-c', '/opt/homebrew/bin/otel-cli exec --name saying-hello-to-bunny /bin/echo "Hi ${NICKNAME}!\c"' ]
            command: [ '/bin/bash', '-c', 'exit $(echo "rand() % 2" | bc)' ]
            # command: [ '/bin/bash', '-c', 'export' ]
            # command: [ '/usr/bin/true' ]
            # command: [ '/usr/bin/false' ]
            env:
              - name: "NICKNAME"
                value: "Bun Bun"
              - name: "OTEL_EXPORTER_OTLP_TIMEOUT"
                value: "1000" # 1000 = 1 second
              - name: "OTEL_EXPORTER_OTLP_PROTOCOL"
                value: "http/protobuf"
              # please don't do this - use certs if you can
              - name: "OTEL_EXPORTER_OTLP_INSECURE"
                value: "true"
              # this is the Grafana instance that we run locally
              # (see the "install-grafana" and related tasks in Taskfile.yml)
              # you'll likely want to change this to point to whatever OpenTelemetry service you're using
              - name: "OTEL_EXPORTER_OTLP_TRACES_ENDPOINT"
                value: "http://localhost:30002/v1/traces"
              - name: "OTEL_CLI_VERBOSE"
                value: "true"
          metrics:
            attempts:
              name: "egress_probe_epsilon_attempts"
              enabled: true
            responseTime:
              name: "egress_probe_epsilon_response_time"
              enabled: true
            successes:
              name: "egress_probe_epsilon_successes"
              enabled: true
    ingress:
      httpServer:
        port: 1312
        readTimeoutMilliseconds: 5000
        readHeaderTimeoutMilliseconds: 5000
        writeTimeoutMilliseconds: 10000
        idleTimeoutMilliseconds: 2000
        maxHeaderBytes: 10000
        openTelemetryMetricsPath: "otel-metrics"
        prometheusMetricsPath: "prom-metrics"
        health:
          - path: "healthz-liveness"
            instantQuery:
              timeout: "5s"
              relativeInstantTime: "-5s"
              query: "1.0 >= bool 0.2"
            metrics:
              attempts:
                name: "ingress_healthz_liveness_attempts"
                enabled: true
                extraLabels:
                  - name: "ingress_healthz_liveness_attempts_label_name"
                    value: "ingress_healthz_liveness_attempts_label_value"
              responseTime:
                name: "ingress_healthz_liveness_response_time"
                enabled: true
                extraLabels: []
          - path: "healthz-readiness"
            rangeQuery:
              timeout: "5s"
              relativeStartTime: "-5s"
              relativeEndTime: "0s"
              interval: "1s"
              query: "1.0 >= bool 0.2"
            metrics:
              attempts:
                name: "ingress_healthz_readiness_attempts"
                enabled: true
                extraLabels: []
              responseTime:
                name: "ingress_healthz_readiness_response_time"
                enabled: true
                extraLabels: []
    signals:
      watchedProcessCommandLineRegEx: "/bin/sleep 50.*"
    telemetry:
      openTelemetry:
        # the otlp exporters are configured through env vars
        # see links for each of their docs at https://opentelemetry.io/docs/instrumentation/go/exporters/
        exporters: 
          # - "stdoutmetric"
          # - "prometheus"
          - "otlpmetrichttp"
          # - "otlpmetricgrpc"
          # - "stdouttrace"
          - "otlptracehttp"
          # - "otlptracegrpc"
      prometheus:
        # setting tsdbPath to an empty string results in a temp dir being created
        # to ensure sufficient space and fast storage, be sure to either use an in-memory emptyDir
        # or use a PersistentVolumeClaim with pre-allocated space
        tsdbPath: "/tsdb"
        tsdbOptions:
          # see https://pkg.go.dev/github.com/prometheus/prometheus@v0.48.1/tsdb#Options
          # for a description of what these do. The other options are the defaults.
          retentionDurationMilliseconds: 3600000
          minBlockDurationMilliseconds: 300000
          maxBlockDurationMilliseconds: 900000
        promql:
          maxConcurrentQueries: 1000
          engineOptions:
            maxSamples: 50000000
            timeoutMilliseconds: 10000
            lookbackDeltaMilliseconds: 900000
            noStepSubqueryIntervalMilliseconds: 1000
